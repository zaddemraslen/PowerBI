"""
This file contains Pydantic schemas used for data validation and serialization/deserialization.
Schemas are used for input validation, response modeling, and converting data between the API layer and database layer.

- CommandeBase: The base schema for the Commande data, used in creating and updating records.
- CommandeCreate: Schema for creating new Commande records (inherits from CommandeBase).
- CommandeOut: Schema for Commande output with an ID included (inherits from CommandeBase).
- CommandeUpdate: Schema for updating Commande records with optional fields.
"""

from pydantic import BaseModel
from datetime import date
from typing import Optional

class CommandeBase(BaseModel):
    """
    Base schema for the Commande model. This schema is used for data validation when 
    creating, updating, or fetching Commande records.
    
    Attributes:
    - client (str): The client associated with the order.
    - produit_commande (str): The product being ordered.
    - quantite (int): The quantity of the ordered product.
    - statut (str): The status of the order (e.g., "Pending", "Shipped").
    - date_commande (date): The date the order was placed.
    """
    client: str
    produit_commande: str
    quantite: int
    statut: str
    date_commande: date

class CommandeCreate(CommandeBase):
    """
    Schema for creating a new Commande record. Inherits from CommandeBase.
    This schema does not include an ID because the ID is auto-generated by the database.

    Attributes are the same as CommandeBase.
    """
    pass

# create production without ID
class CommandeOut(CommandeBase):
    """
    Schema for representing a Commande record as output. Inherits from CommandeBase
    and includes the unique ID of the Commande.

    Attributes:
    - id_commande (int): The unique identifier for the Commande record.
    """
    id_commande: int

    class Config:
        # Ensures Pydantic models use attributes of SQLAlchemy models
        from_attributes = True

class CommandeUpdate(BaseModel):
    """
    Schema for updating an existing Commande record. All fields are optional.
    This schema is used to apply partial updates to a Commande.

    Attributes:
    - client (Optional[str]): The client associated with the order (optional).
    - produit_commande (Optional[str]): The product being ordered (optional).
    - quantite (Optional[int]): The quantity of the ordered product (optional).
    - statut (Optional[str]): The status of the order (optional).
    - date_commande (Optional[date]): The date the order was placed (optional).
    """
    client: Optional[str]= None
    produit_commande: Optional[str]= None
    quantite: Optional[int]= None
    statut: Optional[str]= None
    date_commande: Optional[date]= None