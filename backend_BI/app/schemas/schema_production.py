from pydantic import BaseModel
from datetime import date
from typing import Optional
from app.schemas.schema_commande import CommandeOut

class ProductionBase(BaseModel):
    """
    Base schema for the Production model. This schema is used for data validation when 
    creating, updating, or fetching Production records.
    
    Attributes:
    - date_production (date): The date the production was completed.
    - id_commande (int): The ID of the associated Commande (foreign key).
    - produit (str): The name of the produced item.
    - quantite (int): The quantity of the produced item.
    - statut (str): The status of the production (e.g., "In Progress", "Completed").
    - prix_unitaire (float): The unit price of the produced item.
    - cout_production (float): The total production cost.
    - temps_production (float): The time taken to produce the item, in hours.
    """
    date_production: date
    id_commande: int
    produit: str
    quantite: int
    statut: str
    prix_unitaire: float
    cout_production: float
    temps_production: float

# create production with ID
class ProductionCreate(ProductionBase):
    """
    Schema for creating a new Production record. Inherits from ProductionBase.
    This schema does not include an ID because the ID is auto-generated by the database.

    Attributes are the same as ProductionBase.
    """
    pass

# create production without ID
class ProductionOut(ProductionBase):
    """
    Schema for representing a Production record as output. Inherits from ProductionBase
    and includes the unique ID of the Production, along with the associated Commande.

    Attributes:
    - id_production (int): The unique identifier for the Production record.
    - commande (CommandeOut): The associated Commande record, returned as a nested object.
    """
    id_production: int
    commande: CommandeOut
    class Config:
        # Ensures Pydantic models use attributes of SQLAlchemy models
        from_attributes = True

class ProductionFlatOut(ProductionBase):
    """
    Schema for representing a Production record as output. Inherits from ProductionBase
    and includes the unique ID of the Production, along with the ID of the associated Commande 
    (as a foreign key, not a nested object).

    Attributes:
    - id_production (int): The unique identifier for the Production record.
    - id_commande (int): The ID of the associated Commande record (foreign key reference).
    """
    id_production: int
    id_commande: int  # just the FK value, no nested object
    class Config:
        # Ensures Pydantic models use attributes of SQLAlchemy models
        from_attributes = True

class ProductionUpdate(BaseModel):
    """
    Schema for updating an existing Production record. All fields are optional.
    This schema is used to apply partial updates to a Production record.

    Attributes:
    - produit (Optional[str]): The name of the produced item (optional).
    - quantite (Optional[int]): The quantity of the produced item (optional).
    - statut (Optional[str]): The status of the production (optional).
    - prix_unitaire (Optional[float]): The unit price of the produced item (optional).
    - cout_production (Optional[float]): The total production cost (optional).
    - temps_production (Optional[float]): The time taken to produce the item, in hours (optional).
    - date_production (Optional[date]): The date the production was completed (optional).
    - id_commande (Optional[int]): The ID of the associated Commande (optional).
    """
    produit: Optional[str]= None
    quantite: Optional[int]= None
    statut: Optional[str]= None
    prix_unitaire: Optional[float]= None
    cout_production: Optional[float]= None
    temps_production: Optional[float]= None
    date_production: Optional[date]= None
    id_commande: Optional[int]= None